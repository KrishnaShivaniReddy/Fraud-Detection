import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
# loading the dataset to a Pandas DataFrame
credit_card_data = pd.read_csv('/content/creditcard.csv')

# if you wanna check first 5 rows of the dataset use .head(); for last 5 rows use .tail() and to get info use .info()
#credit_card_data.head()
# once check if there are any missing values and know how many missing values in each column
#credit_card_data.isnull().sum()

# distribution of legit transactions & fraudulent transactions
credit_card_data['Class'].value_counts()
# separating the data for analysis
legit = credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]
#print(legit.shape)
#print(fraud.shape)
#legit.Amount.describe()
# compare the values for both transactions
a1 = credit_card_data.groupby('Class').mean()  #comparing them 

#let's Build a sample dataset containing similar distribution of normal transactions and Fraudulent Transactions
legit_sample = legit.sample(n=492)
#let's concatenating two DataFrames
new_dataset = pd.concat([legit_sample, fraud], axis=0) #using axis 0 just to add in terms of rows
#new_dataset['Class'].value_counts() here you can check how many legit and fraud samples u were using
a2 = new_dataset.groupby('Class').mean()
#u can compare a1 and a2 and observe that both the feature mean values are similar, 
#which indicates nature of dataset is not changed - it means we got a good sample
X = new_dataset.drop(columns='Class', axis=1)
Y = new_dataset['Class']
#print(X)
#print(Y)

#Now Let's Split the data into Training data & Testing Data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=4)
#print(X.shape, X_train.shape, X_test.shape)
#print(Y.shape, Y_train.shape, Y_test.shape)
model = LogisticRegression()
# training the Logistic Regression Model with Training Data
model.fit(X_train,Y_train)
# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training data : ', training_data_accuracy)
# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score on Test Data : ', test_data_accuracy)
